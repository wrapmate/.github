name: Auto-Seed Lovable Constraints

# Since GitHub Actions doesn't support 'repository' event triggers,
# this workflow runs on a schedule and checks for new repositories
# that need constraints seeded

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch: # Allow manual triggering for testing

jobs:
  check-and-seed:
    runs-on: ubuntu-latest

    steps:
      - name: Check for new Lovable repositories
        id: find_repos
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "Checking for new Lovable repositories..."

          # Get list of repos created in the last 10 minutes that match patterns
          # Filter for repos starting with 'proto-' or 'lovable-'
          CUTOFF_TIME=$(date -u -d '10 minutes ago' +%Y-%m-%dT%H:%M:%SZ)

          # Query GitHub API for recent repos
          REPOS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/orgs/wrapmate/repos?sort=created&direction=desc&per_page=10" \
            --jq ".[] | select(.created_at > \"$CUTOFF_TIME\") | select(.name | startswith(\"proto-\") or startswith(\"lovable-\")) | {name: .name, owner: .owner.login, created_at: .created_at, creator: .owner.login}")

          if [ -z "$REPOS" ]; then
            echo "No new Lovable repositories found"
            echo "repos_found=false" >> $GITHUB_OUTPUT
          else
            echo "Found new repositories:"
            echo "$REPOS"
            echo "repos_found=true" >> $GITHUB_OUTPUT
            echo "$REPOS" > /tmp/repos.json
          fi

      - name: Process each repository
        if: steps.find_repos.outputs.repos_found == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          # Read repos from file
          if [ ! -f /tmp/repos.json ]; then
            echo "No repos file found"
            exit 0
          fi

          # Process each repo
          while IFS= read -r repo_json; do
            REPO_NAME=$(echo "$repo_json" | jq -r '.name')
            REPO_OWNER=$(echo "$repo_json" | jq -r '.owner')

            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "Processing: $REPO_OWNER/$REPO_NAME"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

            # Check if constraints already exist
            CONSTRAINTS_EXISTS=$(gh api \
              -H "Accept: application/vnd.github+json" \
              "/repos/$REPO_OWNER/$REPO_NAME/contents/.lovable/constraints.md" \
              2>/dev/null && echo "true" || echo "false")

            if [ "$CONSTRAINTS_EXISTS" = "true" ]; then
              echo "✓ Constraints already exist, skipping"
              continue
            fi

            echo "✗ Constraints not found, seeding..."

            # Clone the repository
            TEMP_DIR=$(mktemp -d)
            cd "$TEMP_DIR"

            gh repo clone "$REPO_OWNER/$REPO_NAME" repo
            cd repo

            # Create directories
            mkdir -p .lovable docs

            # Template repository
            TEMPLATE_REPO="wrapmate/lovable-prototype-template"
            TEMPLATE_BRANCH="main"
            BASE_URL="https://raw.githubusercontent.com/${TEMPLATE_REPO}/${TEMPLATE_BRANCH}"

            # Download constraint files
            echo "Downloading constraints from $TEMPLATE_REPO..."
            curl -sf "${BASE_URL}/.lovable/constraints.md" > .lovable/constraints.md
            curl -sf "${BASE_URL}/.lovable/README.md" > .lovable/README.md
            curl -sf "${BASE_URL}/docs/HANDOFF_CHECKLIST.md" > docs/HANDOFF_CHECKLIST.md
            curl -sf "${BASE_URL}/.cursorrules" > .cursorrules

            # Configure git
            git config user.name "devops-wm"
            git config user.email "devops@wrapmate.com"

            # Commit and push
            git add .lovable/ docs/ .cursorrules
            git commit -m "chore: Add Lovable engineering constraints [automated]

These constraints ensure Lovable-generated code follows
organization engineering standards.

Added automatically by GitHub Actions.
See: https://github.com/wrapmate/lovable-prototype-template

Lovable will now read .lovable/constraints.md and follow:
- TypeScript strict mode (no 'any' types)
- Component size limits (150 lines max)
- Feature-based organization
- Tailwind CSS only
- Required error/loading states
- Approved libraries only

This reduces engineering refactor time by 70%+ during handoff."

            git push

            echo "✓ Constraints successfully added to $REPO_NAME"

            # Create notification issue
            gh issue create \
              --repo "$REPO_OWNER/$REPO_NAME" \
              --title "✅ Engineering constraints added" \
              --label "automated,lovable-constraints" \
              --body "## Lovable Constraints Added

Engineering constraints have been automatically added to this repository.

### What was added:
- \`.lovable/constraints.md\` - Rules Lovable follows
- \`.lovable/README.md\` - Explanation of constraints
- \`docs/HANDOFF_CHECKLIST.md\` - Pre-handoff checklist
- \`.cursorrules\` - Rules for Cursor AI

### How it works:
Lovable now reads \`.lovable/constraints.md\` and automatically follows engineering standards when generating code.

**Test it**: Ask Lovable: \"Can you see the constraints in .lovable/constraints.md?\"

### Resources:
- 📚 [Full Template](https://github.com/wrapmate/lovable-prototype-template)
- 📋 [Handoff Checklist](./docs/HANDOFF_CHECKLIST.md)
- 🔧 [Constraints](./.lovable/constraints.md)

Happy prototyping! 🚀"

            # Cleanup
            cd /
            rm -rf "$TEMP_DIR"

          done < /tmp/repos.json

      - name: Report summary
        if: always()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Auto-seed workflow completed"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
